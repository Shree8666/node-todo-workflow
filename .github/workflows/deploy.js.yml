name: Node.js Microservice CI/CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: SonarQube scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      # Step 5: SSH into EC2 and deploy Docker Compose
      - name: SSH & Deploy Docker Compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            DEPLOY_DIR=/home/ec2-user/node-microservice

            # Install git if not present
            if ! command -v git &> /dev/null
            then
              echo "Git not found. Installing..."
              if [ -f /etc/debian_version ]; then
                sudo apt-get update -y && sudo apt-get install -y git
              elif [ -f /etc/redhat-release ]; then
                sudo yum install -y git
              else
                echo "Unsupported OS. Please install git manually."
                exit 1
              fi
            fi

            # Clone repo if folder doesn't exist
            if [ ! -d "$DEPLOY_DIR/.git" ]; then
              git clone -b main https://github.com/${{ github.repository }} $DEPLOY_DIR
            fi

            cd $DEPLOY_DIR
            git fetch origin
            git reset --hard origin/main

            docker compose pull
            docker compose build --no-cache
            docker compose up -d --force-recreate

            docker image prune -f

      # Step 6: Health check (ensure app is live on UI)
      - name: Check Application Health
        run: |
          for i in {1..10}; do
            if curl -sSf "http://${{ secrets.EC2_HOST }}:8000" > /dev/null; then
              echo "Application is UP ✅"
              exit 0
            fi
            echo "Waiting for app to start... ($i/10)"
            sleep 10
          done
          echo "Application failed to start ❌"
          exit 1
