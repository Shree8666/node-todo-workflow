name: Node.js Microservice CI/CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: SonarQube scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}


      # Step 5: SSH into EC2 and deploy Docker Compose
      - name: SSH & Deploy Docker Compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            DEPLOY_DIR=/home/ec2-user/node-microservice

            # Clone repo if folder doesn't exist
            if [ ! -d "$DEPLOY_DIR/.git" ]; then
              git clone -b main https://github.com/${{ github.repository }} $DEPLOY_DIR
            fi

            cd $DEPLOY_DIR

            # Pull latest changes from main
            git fetch origin
            git reset --hard origin/main

            # Docker Compose deployment
            docker compose pull
            docker compose build --no-cache
            docker compose up -d --force-recreate

            # Cleanup old/unused images
            docker image prune -f

      # Step 6: Run OWASP ZAP Scan (fail on Medium/High risks)
      - name: OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: "http://${{ secrets.EC2_HOST }}:8000"
          docker_name: "owasp/zap2docker-weekly"   # âœ… custom ZAP image
          cmd_options: "-a -l FAIL"
          artifact_name: zap-scan-report

      # Step 7: Upload ZAP Report to S3
      - name: Upload ZAP Report to S3
        run: |
          aws s3 cp report_html.html s3://my-report-s3-buckett/zap-reports/zap-report-$(date +%F-%H-%M).html
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-north-1
